{"version":3,"sources":["modal.js"],"names":[],"mappings":"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","file":"modal.js","sourcesContent":["/**\r\n* THE MODAL\r\n*/\r\n\r\nclass Modal {\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {object|string} parameter\r\n     * @return {void}\r\n     */\r\n    constructor(parameter, open = true) {\r\n        let typeofParameter = typeof parameter;\r\n        this.$body = $(document.body);\r\n\r\n        if (typeofParameter === 'object') {\r\n            this.$el = $(parameter);\r\n            this._initializeModal(open);\r\n        }\r\n        else if (typeofParameter === 'string') {\r\n            let loadPromise = this._loadModal(parameter);\r\n            \r\n            loadPromise.then(modalHTML => {\r\n                this.$el = this._addModal(modalHTML);\r\n                this._initializeModal(open);\r\n            }, () => {\r\n                throw new Error(`An error occurred while loading modal from ${parameter}`);\r\n            });\r\n            \r\n            return;\r\n        }\r\n        else {\r\n            throw new Error('Wrong parameter for the Modal');\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Modifier for the modal when it is open\r\n    * @type {String}\r\n    */\r\n    static get classNameOpened() {\r\n        return 'modal--open';\r\n    }\r\n\r\n    /**\r\n     * Opens the modal\r\n     * @public\r\n     * @return {void}\r\n     */\r\n    openModal() {\r\n        this.$body.addClass('overflow-hidden');\r\n        this.$el.addClass(Modal.classNameOpened);\r\n    }\r\n\r\n    /**\r\n     * Closes the modal\r\n     * @public\r\n     * @return {void}\r\n     */\r\n    closeModal() {\r\n        this.$body.removeClass('overflow-hidden');\r\n        this.$el.removeClass(Modal.classNameOpened);\r\n    }\r\n\r\n    /**\r\n     * Initializes the modal\r\n     * @private\r\n     * @param  {boolean} open\r\n     * @return {void}\r\n     */\r\n    _initializeModal(open) {\r\n        if (open) {\r\n            this.openModal();   \r\n        }\r\n\r\n        this._addEventListeners();\r\n    }\r\n\r\n    /**\r\n     * Event listeners\r\n     * @private\r\n     * @return {void}\r\n     */\r\n    _addEventListeners() {\r\n        let $closeToggle = this.$el.find('[data-close*=\"modal\"]');\r\n        let $target;\r\n\r\n\r\n        //Close the modal when user clicking on the close button\r\n        $closeToggle.click(event => {\r\n            this.closeModal();\r\n            event.preventDefault();\r\n        });\r\n\r\n        //Close the modal when user clicking on the background\r\n        this.$el.click(event => {\r\n            $target = $(event.target);\r\n            \r\n            if (!($target.is('[data-el=\"modal-dialog\"]')) && !($target.closest('[data-el=\"modal-dialog\"]').length)) {\r\n               this.closeModal(); \r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the last modal ID\r\n     * @private\r\n     * @return {number}\r\n     */\r\n    _getLastModalID() {\r\n        let lastModalID = $('[data-modal*=\"modal\"]')\r\n            .last()\r\n                .attr('data-modal')\r\n                    .match(/\\d/)\r\n                    .join()\r\n\r\n        return parseInt(lastModalID);\r\n    }\r\n\r\n    /**\r\n     * Creates the new modal ID\r\n     * @private\r\n     * @param  {number} lastModalID\r\n     * @return {number}\r\n     */\r\n    _createModalID(lastModalID) {\r\n        return lastModalID + 1;\r\n    }\r\n\r\n    _setModalID($modal, modalID) {\r\n        return $modal.attr('data-el', `modal-${modalID}`);\r\n    }\r\n\r\n    /**\r\n     * Loads the modal from remote url\r\n     * @private\r\n     * @param  {string} url\r\n     * @return {object}\r\n     */\r\n    _loadModal(url) {\r\n        let loadPromise = new Promise((resolve, reject) => {\r\n            $.ajax({\r\n                url: url,\r\n                type: 'GET',\r\n                timeout: 10000,\r\n                success: data => {\r\n                    resolve(data);\r\n                },\r\n                error: () => {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n\r\n        return loadPromise;\r\n    }\r\n\r\n    /**\r\n     * Adds the loaded modal to DOM\r\n     * @private\r\n     * @param {object} modal\r\n     * @return {object}\r\n     */\r\n    _addModal(modalHTML) {\r\n        let $modal = $(modalHTML);\r\n        let lastModalID = this._getLastModalID();\r\n        let modalID = this._createModalID(lastModalID);\r\n\r\n        $modal = this._setModalID($modal, modalID);\r\n\r\n        return $modal.appendTo(this.$body);\r\n    }\r\n}\r\n\r\n\r\n(function () {\r\n    let initializedModals = new Map();\r\n\r\n    /**\r\n     * Open the modal when user clicking on the modal toggle\r\n     */\r\n    $('[data-open*=\"modal\"]').click(event => {\r\n        let modalID = getModalID(event.target);\r\n        let initializedModal = initializedModals.get(modalID);\r\n\r\n        if (!initializedModal) {\r\n            /**\r\n             * The modal we should open\r\n             * @type {object}\r\n             */\r\n            let $modal = $(`[data-modal=\"${modalID}\"]`);\r\n\r\n            if ($modal.length > 1) {\r\n                throw new Error(`There is a couple modals with the same ID = ${modalID} !`);\r\n            }\r\n            else if ($modal.length < 1) {\r\n                console.info(`There isn't the modal with the ID = ${modalID} !`)\r\n            }\r\n            else {\r\n                initializeModal(modalID, $modal);\r\n            }\r\n        }\r\n        else {\r\n            initializedModal.openModal();\r\n        }\r\n\r\n        event.preventDefault();\r\n    });\r\n\r\n    /**\r\n     * Gets modal's ID in the DOM\r\n     * @param  {object} target\r\n     * @return {string}\r\n     */\r\n    function getModalID(target) {\r\n        let $target = $(target);\r\n        let modalID = $target.attr('data-open');\r\n\r\n        return modalID;\r\n    }\r\n\r\n    /**\r\n     * Creates the new modal\r\n     * @param  {string} modalID\r\n     * @param  {object} $modal\r\n     * @return {object}\r\n     */\r\n    function initializeModal(modalID, $modal) {\r\n        let modal = new Modal($modal);\r\n        \r\n        return initializedModals.set(modalID, modal);\r\n    }\r\n\r\n})();"],"sourceRoot":"/source/"}